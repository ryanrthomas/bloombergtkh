generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CalendarEvents {
  id          Int       @id @default(autoincrement())
  calendar_id Int
  created_by  String
  event_name  String    @db.VarChar(100)
  start_time  DateTime  @db.Timestamptz(6)
  end_time    DateTime  @db.Timestamptz(6)
  date        DateTime  @db.Date
  description String
  event_type  String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  Calendars   Calendars @relation(fields: [calendar_id], references: [id])
  Students    Students  @relation(fields: [created_by], references: [id], onDelete: Cascade)

  @@index([calendar_id])
  @@index([created_by])
  @@index([date])
  @@index([deleted_at])
  @@index([event_type])
  @@index([start_time])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Calendars {
  id             Int              @id @default(autoincrement())
  student_id     String?          @unique @db.VarChar(7)
  group_id       Int?             @unique
  CalendarEvents CalendarEvents[]
  StudyGroups    StudyGroups?     @relation(fields: [group_id], references: [id])
  Students       Students?        @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([student_id])
}

model CallRecords {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  call_type       String        @db.VarChar(10)
  started_by      String
  start_time      DateTime      @db.Timestamptz(6)
  end_time        DateTime?     @db.Timestamptz(6)
  call_status     String        @db.VarChar(10)
  duration        Int?
  Conversations   Conversations @relation(fields: [conversation_id], references: [id])
  Students        Students      @relation(fields: [started_by], references: [id], onDelete: Cascade)

  @@index([call_status])
  @@index([conversation_id])
  @@index([duration])
  @@index([start_time])
  @@index([started_by])
}

model ConversationParticipants {
  student_id      String
  conversation_id Int
  joined_at       DateTime      @default(now()) @db.Timestamptz(6)
  left_at         DateTime?     @db.Timestamptz(6)
  Conversations   Conversations @relation(fields: [conversation_id], references: [id])
  Students        Students      @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, conversation_id])
  @@index([joined_at])
  @@index([left_at])
}

model Conversations {
  id                       Int                        @id @default(autoincrement())
  conversation_type        String                     @db.VarChar(15)
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  deleted_at               DateTime?                  @db.Timestamptz(6)
  CallRecords              CallRecords[]
  ConversationParticipants ConversationParticipants[]
  Messages                 Messages[]
  StudyGroups              StudyGroups?

  @@index([conversation_type])
  @@index([created_at])
  @@index([deleted_at])
}

model CourseFiles {
  course_id Int
  file_id   Int
  Courses   Courses @relation(fields: [course_id], references: [id])
  Files     Files   @relation(fields: [file_id], references: [id])

  @@id([course_id, file_id])
  @@index([course_id, file_id])
}

model Courses {
  id                  Int                   @id @default(autoincrement())
  course_name         String                @db.VarChar(100)
  course_difficulity  ExperienceLevels
  description         String
  number_of_lessons   Int
  course_rating       Decimal               @db.Decimal(3, 2)
  course_likes        Int
  CourseFiles         CourseFiles[]
  Lessons             Lessons[]
  StudentCourses      StudentCourses[]
  StudentLikesRatings StudentLikesRatings[]

  @@index([course_difficulity])
  @@index([course_likes])
  @@index([course_name])
  @@index([course_rating])
  @@index([id])
}

model Files {
  id            Int            @id @default(autoincrement())
  student_id    String?        @unique
  file_location String         @db.VarChar(255)
  file_name     String         @db.VarChar(255)
  file_size     BigInt
  file_type     String         @db.VarChar(20)
  mime_type     String?        @db.VarChar(100)
  checksum      String?        @db.VarChar(64)
  uploaded_at   DateTime       @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime?      @db.Timestamptz(6)
  CourseFiles   CourseFiles[]
  Students      Students?      @relation(fields: [student_id], references: [id], onDelete: Cascade)
  LessonFiles   LessonFiles[]
  MessageFiles  MessageFiles[]

  @@index([checksum])
  @@index([deleted_at])
  @@index([file_type])
  @@index([student_id])
  @@index([uploaded_at])
}

model LessonFiles {
  lesson_id Int
  file_id   Int
  Files     Files   @relation(fields: [file_id], references: [id])
  Lessons   Lessons @relation(fields: [lesson_id], references: [id])

  @@id([lesson_id, file_id])
  @@index([lesson_id, file_id])
}

model Lessons {
  id                Int              @id @default(autoincrement())
  course_id         Int
  lesson_name       String           @db.VarChar(100)
  lesson_difficulty ExperienceLevels
  description       String
  duration          Int
  LessonFiles       LessonFiles[]
  Courses           Courses          @relation(fields: [course_id], references: [id])
  StudentLessons    StudentLessons[]
}

model MessageFiles {
  message_id Int
  file_id    Int
  Files      Files    @relation(fields: [file_id], references: [id])
  Messages   Messages @relation(fields: [message_id], references: [id])

  @@id([message_id, file_id])
}

model Messages {
  id              Int            @id @default(autoincrement())
  conversation_id Int
  sent_by         String
  message_type    String         @db.VarChar(10)
  message_content String?
  sent_at         DateTime       @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?      @db.Timestamptz(6)
  MessageFiles    MessageFiles[]
  Conversations   Conversations  @relation(fields: [conversation_id], references: [id])
  Students        Students       @relation(fields: [sent_by], references: [id], onDelete: Cascade)

  @@index([conversation_id, sent_at])
  @@index([deleted_at])
  @@index([message_type])
  @@index([sent_at])
  @@index([sent_by])
}

model PreferredLanguages {
  student_id String       @db.VarChar(7)
  language   LanguageEnum
  Students   Students     @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, language])
  @@index([student_id, language])
}

model PreferredStudyStyles {
  student_id  String
  study_style StudyStyles
  updated_at  DateTime    @default(now()) @db.Timestamptz(6)
  Students    Students    @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, study_style])
  @@index([study_style])
}

model PreferredStudyTimes {
  student_id  String
  time_of_day TimesOfDay
  updated_at  DateTime   @default(now()) @db.Timestamptz(6)
  Students    Students   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, time_of_day])
  @@index([time_of_day])
}

model PreferredSubjects {
  student_id String
  subject_id Int
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  Students   Students @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Subjects   Subjects @relation(fields: [subject_id], references: [id])

  @@id([student_id, subject_id])
}

model StudentAvailability {
  student_id  String
  day_of_week DaysOfWeek
  updated_at  DateTime   @default(now()) @db.Timestamptz(6)
  Students    Students   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, day_of_week])
  @@index([day_of_week])
}

model StudentCourses {
  student_id    String   @db.VarChar(7)
  course_id     Int
  course_status Status
  Courses       Courses  @relation(fields: [course_id], references: [id])
  Students      Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, course_id])
  @@index([student_id, course_id])
}

model StudentLessons {
  student_id    String   @db.VarChar(7)
  lesson_id     Int
  lesson_status Status
  Lessons       Lessons  @relation(fields: [lesson_id], references: [id])
  Students      Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, lesson_id])
  @@index([student_id, lesson_id])
}

model StudentLikesRatings {
  student_id String   @db.VarChar
  course_id  Int
  Courses    Courses  @relation(fields: [course_id], references: [id])
  Students   Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, course_id])
  @@index([student_id, course_id])
}

model Students {
  id                       String                     @id @db.VarChar(7)
  user_id                  String                     @unique
  email                    String                     @unique
  first_name               String                     @db.VarChar(50)
  last_name                String                     @db.VarChar(50)
  personality_type         String?                    @db.VarChar(6)
  timezone                 String?                    @db.VarChar(6)
  gpa                      Decimal?                   @db.Decimal(3, 2)
  bio                      String?
  created_at               DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at               DateTime                   @default(now()) @db.Timestamptz(6)
  deleted_at               DateTime?                  @db.Timestamptz(6)
  CalendarEvents           CalendarEvents[]
  Calendars                Calendars?
  CallRecords              CallRecords[]
  ConversationParticipants ConversationParticipants[]
  Files                    Files?
  Messages                 Messages[]
  PreferredLanguages       PreferredLanguages[]
  PreferredStudyStyles     PreferredStudyStyles[]
  PreferredStudyTimes      PreferredStudyTimes[]
  PreferredSubjects        PreferredSubjects[]
  StudentAvailability      StudentAvailability[]
  StudentCourses           StudentCourses[]
  StudentLessons           StudentLessons[]
  StudentLikesRatings      StudentLikesRatings[]
  StudyGroupMembers        StudyGroupMembers[]
  SubjectExperienceLevels  SubjectExperienceLevels[]

  @@index([created_at])
  @@index([deleted_at])
  @@index([email])
  @@index([first_name, last_name])
}

model StudyGroupMembers {
  student_id  String
  group_id    Int
  joined_at   DateTime    @default(now()) @db.Timestamptz(6)
  left_at     DateTime?   @db.Timestamptz(6)
  StudyGroups StudyGroups @relation(fields: [group_id], references: [id])
  Students    Students    @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, group_id])
  @@index([joined_at])
  @@index([left_at])
}

model StudyGroups {
  id                Int                 @id @default(autoincrement())
  conversation_id   Int?                @unique
  calendar_id       Int?                @unique
  group_name        String              @db.VarChar(30)
  group_size        Int
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  deleted_at        DateTime?           @db.Timestamptz(6)
  Calendars         Calendars?
  StudyGroupMembers StudyGroupMembers[]
  Conversations     Conversations?      @relation(fields: [conversation_id], references: [id])

  @@index([created_at])
  @@index([deleted_at])
  @@index([group_name])
}

model SubjectExperienceLevels {
  student_id       String
  subject_id       Int
  experience_level ExperienceLevels
  updated_at       DateTime         @default(now()) @db.Timestamptz(6)
  Students         Students         @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Subjects         Subjects         @relation(fields: [subject_id], references: [id])

  @@id([student_id, subject_id])
  @@index([experience_level])
}

model Subjects {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(100)
  PreferredSubjects       PreferredSubjects[]
  SubjectExperienceLevels SubjectExperienceLevels[]

  @@index([name])
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ExperienceLevels {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LanguageEnum {
  ENGLISH
  SPANISH
  FRENCH
  GERMAN
  ITALIAN
  PORTUGUESE
  RUSSIAN
  CHINESE_SIMPLIFIED
  CHINESE_TRADITIONAL
  JAPANESE
  KOREAN
  ARABIC
  HINDI
  DUTCH
  SWEDISH
  NORWEGIAN
  DANISH
  POLISH
  CZECH
  HUNGARIAN
  FINNISH
  GREEK
  TURKISH
  HEBREW
  THAI
  VIETNAMESE
  INDONESIAN
  MALAY
  FILIPINO
  SWAHILI
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum StudyStyles {
  PAIR
  GROUP
  FLEXIBLE
}

enum TimesOfDay {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
}
